.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH AFTER 1 "perl 5.005, patch 02" "19/Feb/100" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
Tk::after \- Execute a command after a time delay
.SH "SYNOPSIS"
\ \ \fI$widget\fR\->\fBafter\fR(\fIms\fR)
.PP
\ \ \fI$id\fR = \fI$widget\fR\->\fBafter\fR(\fIms\fR?,\fIcallback\fR?)
.PP
\ \ \fI$id\fR = \fI$widget\fR\->\fBrepeat\fR(\fIms\fR?,\fIcallback\fR?)
.PP
\ \ \fI$widget\fR\->\fBafterCancel\fR(\fI$id\fR)
.PP
\ \ \fI$id\fR = \fI$widget\fR\->\fBafterIdle\fR(\fIcallback\fR)
.PP
\ \ \fI$widget\fR\->\fBafterInfo\fR?(\fI$id\fR)?
.SH "DESCRIPTION"
This method is used to delay execution of the program or to execute
a callback in background sometime in the future.
.PP
In perl/Tk \fI$widget\fR\->\fBafter\fR is implemented via the class \f(CWTk::After\fR,
and callbacks are associated with \fI$widget\fR, and are automatically cancelled
when the widget is destroyed. An almost identical interface, but without
automatic cancel, and without repeat is provided via Tk::after method.
.PP
The internal Tk::After class has the following synopsis:
.PP
.Vb 3
\&  $id = Tk::After->new($widget,$time,'once',callback);
\&  $id = Tk::After->new($widget,$time,'repeat',callback);
\&  $id->cancel;
.Ve
The \fBafter\fR method has several forms as follows:
.Ip "\fI$widget\fR\->\fBafter\fR(\fIms\fR)" 4
The value \fIms\fR must be an integer giving a time in milliseconds.
The command sleeps for \fIms\fR milliseconds and then returns.
While the command is sleeping the application does not respond to
events.
.Ip "\fI$widget\fR\->\fBafter\fR(\fIms\fR,\fIcallback\fR)" 4
In this form the command returns immediately, but it arranges
for \fIcallback\fR be executed \fIms\fR milliseconds later as an
event handler.
The callback will be executed exactly once, at the given time.
The command will be executed in context of \fI$widget\fR.
If an error occurs while executing the delayed command then the
Tk::Error mechanism is used to report the error.
The \fBafter\fR command returns an identifier (an object in the perl/Tk
case) that can be used to cancel the delayed command using \fBafterCancel\fR.
.Ip "\fI$widget\fR\->\fBrepeat\fR(\fIms\fR,\fIcallback\fR)" 4
In this form the command returns immediately, but it arranges
for \fIcallback\fR be executed \fIms\fR milliseconds later as an
event handler. After \fIcallback\fR has executed it is re-scheduled,
to be executed in a futher \fIms\fR, and so on until it is cancelled.
.Ip "\fI$widget\fR\->\fBafterCancel\fR(\fI$id\fR)" 4
.Ip "\fI$id\fR\->cancel" 4
Cancels the execution of a delayed command that
was previously scheduled.
\fI$id\fR indicates which command should be canceled;  it must have
been the return value from a previous \fBafter\fR command.
If the command given by \fI$id\fR has already been executed (and
is not scheduled to be executed again) then \fBafterCancel\fR
has no effect.
.Ip "\fI$widget\fR\->\fBafterCancel\fR(\fIcallback\fR)" 4
\fIThis form is not robust in perl/Tk \- its use is deprecated.\fR
This command should also cancel the execution of a delayed command.
The \fIcallback\fR argument is compared with pending callbacks,
if a match is found, that callback is
cancelled and will never be executed;  if no such callback is
currently pending then the \fBafterCancel\fR has no effect.
.Ip "\fI$widget\fR\->\fBafterIdle\fR(\fIcallback\fR)" 4
Arranges for \fIcallback\fR to be evaluated later as an idle callback.
The script will be run exactly once, the next time the event
loop is entered and there are no events to process.
The command returns an identifier that can be used
to cancel the delayed command using \fBafterCancel\fR.
If an error occurs while executing the script then the
Tk::Error mechanism is used to report the error.
.Ip "\fI$widget\fR\->\fBafterInfo\fR?(\fI$id\fR)?" 4
This command returns information about existing event handlers.  If no \fI$id\fR
argument is supplied, the command returns a list of the identifiers for all
existing  event handlers created by the \fBafter\fR command for this MainWindow. If
\fI$id\fR is supplied, it specifies an existing handler; \fI$id\fR must have been the
return value from some previous call to \fBafter\fR and it must not have triggered
yet or been cancelled. In this case the command returns a list with two elements.
The first element of the list is the callback associated  with \fI$id\fR, and the
second element is either \fBidle\fR or \fBtimer\fR to indicate what kind of event
handler it is.
.PP
The \fBafter\fR(\fIms\fR) and \fBafterIdle\fR forms of the command
assume that the application is event driven:  the delayed commands
will not be executed unless the application enters the event loop.
In applications that are not normally event-driven,
the event loop can be entered with the \fBvwait\fR and \fBupdate\fR commands.
.SH "SEE ALSO"
Tk::Error
Tk::callbacks
.SH "KEYWORDS"
cancel, delay, idle callback, sleep, time

.rn }` ''
.IX Title "AFTER 1"
.IX Name "Tk::after - Execute a command after a time delay"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Item "\fI$widget\fR\->\fBafter\fR(\fIms\fR)"

.IX Item "\fI$widget\fR\->\fBafter\fR(\fIms\fR,\fIcallback\fR)"

.IX Item "\fI$widget\fR\->\fBrepeat\fR(\fIms\fR,\fIcallback\fR)"

.IX Item "\fI$widget\fR\->\fBafterCancel\fR(\fI$id\fR)"

.IX Item "\fI$id\fR\->cancel"

.IX Item "\fI$widget\fR\->\fBafterCancel\fR(\fIcallback\fR)"

.IX Item "\fI$widget\fR\->\fBafterIdle\fR(\fIcallback\fR)"

.IX Item "\fI$widget\fR\->\fBafterInfo\fR?(\fI$id\fR)?"

.IX Header "SEE ALSO"

.IX Header "KEYWORDS"

