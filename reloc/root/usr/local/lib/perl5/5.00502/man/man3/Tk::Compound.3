.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH COMPOUND 1 "perl 5.005, patch 02" "4/Dec/99" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
Tk::Compound \- Create multi-line compound images.
.PP
\ \ \ \ use Tk::Compound;
\ \ \ \ \fI$image\fR = \fI$widget\fR\->\fBCompound\fR?(\fIname\fR??,\fIoptions\fR?)
\ \ \ \ \fI$image\fR\->\fBLine\fR?(\fIoptions\fR?)
\ \ \ \ \fI$image\fR\->\fBText\fR?(\fIoptions\fR?)
\ \ \ \ \fI$image\fR\->\fBBitmap\fR?(\fIoptions\fR?)
\ \ \ \ \fI$image\fR\->\fBImage\fR?(\fIoptions\fR?)
\ \ \ \ \fI$image\fR\->\fBSpace\fR?(\fIoptions\fR?)
.SH "DESCRIPTION"
Compound image types can be used to create images that consists of
multiple horizontal lines; each line is composed of a series of items
(texts, bitmaps, images or spaces) arranged from left to
right. Compound images are mainly used to embed complex drawings into
widgets that support the \fB\-image\fR option. As shown in the EXAMPLE
section below, a compound image can be used to display a bitmap and a
text string simutaneously in a Tk \fBButton\fR widget.
.PP
Compound images can only be used on windows on the same display as, and
with the same pixel depth and visual as the \fI$widget\fR used to create them.
.SH "CREATING COMPOUND IMAGES"
Compounds are created using \fI$widget\fR\->\fBCompound\fR.            
Compounds support the following \fIoptions\fR:
.Ip "\fB\-background\fR => \fIcolor\fR" 4
Specifies the background color of the compound image. This color is
also used as the default background color for the bitmap items in the
compound image.
.Ip "\fB\-borderwidth\fR => \fIpixels\fR" 4
Specifies a non-negative value indicating the width of the 3-D border
drawn around the compound image.
.Ip "\fB\-font\fR => \fIfont\fR" 4
Specifies the default font for the text items in the compound image.
.Ip "\fB\-foreground\fR => \fIcolor\fR" 4
Specifies the default foreground color for the bitmap and text items
in the compound image.
.Ip "\fB\-padx\fR => \fIvalue\fR" 4
Specifies a non-negative value indicating how much extra space to
request for the compound image in the X\-direction. The \fIvalue\fR may
have any of the forms acceptable to \fBTk_GetPixels(3)\fR.
.Ip "\fB\-pady\fR => \fIvalue\fR" 4
Specifies a non-negative value indicating how much extra space to
request for the compound image in the Y\-direction.
.Ip "\fB\-relief\fR => \fIvalue\fR" 4
Specifies the 3-D effect desired for the background of the compound
image. Acceptable values are \fBraised\fR, \fBsunken\fR, \fBflat\fR,
\fBridge\fR, and \fBgroove\fR.
.Ip "\fB\-showbackground\fR => \fIvalue\fR" 4
Specifies whether the background and the 3D borders should be drawn.
Must be a valid boolean value. By default the background is not drawn
and the compound image appears to have a transparent background.
.SH "IMAGE COMMAND"
When a compound image is created, Tk also creates a new object.
This object supports the \fBconfigure\fR and \fBcget\fR methods
described in the \fITk::options\fR manpage which can be used to enquire and
modify the options described above.
               
The object also supports the following methods:
.Ip "\fI$compound\fR\->\fBLine\fR?(\fIoption =\fR value ...>)?" 4
Creates a new line at the bottom of the compound image. Lines support
the following \fIoptions\fR:
.Ip "\fB\-anchor\fR value" 8
Specifies how the line should be aligned along the horizontal axis.
When the values are \fBw\fR, \fBsw\fR or \fBnw\fR, the line is aligned
to the left. When the values are \fBc\fR, \fBs\fR or \fBn\fR, the line
is aligned to the middle.  When the values are \fBe\fR, \fBse\fR or
\fBne\fR, the line is aligned to the right.
.Ip "\fB\-padx\fR => \fIvalue\fR" 8
Specifies a non-negative value indicating how much extra space to
request for this line in the X\-direction.
.Ip "\fI$compound\fR\->\fIItemtype\fR?(\fIoption =\fR value ...>)?" 4
Creates a new item of the type \fIItemtype\fR at the end of the last
line of the compound image. All types of items support
these following common \fIoptions\fR:
.Ip "\fB\-anchor\fR value" 8
Specifies how the item should be aligned along the vertical axis. When
the values are \fBn\fR, \fBnw\fR or \fBne\fR, the item is aligned to
the top of the line. When the values are \fBc\fR, \fBw\fR or \fBe\fR,
the item is aligned to the middle of the line.  When the values are
\fBs\fR, \fBse\fR or \fBsw\fR, the item is aligned to the bottom of
the line.
.Ip "\fB\-padx\fR => \fIvalue\fR" 8
Specifies a non-negative value indicating how much extra space to
request for this item in the X\-direction.
.Ip "\fB\-pady\fR => \fIvalue\fR" 8
Specifies a non-negative value indicating how much extra space to
request for this item in the Y\-direction.
.Ip "\fIitem-type\fR can be any of the following:" 8
.Ip "\fI$compound\fR\->\fBBitmap\fR?(\fIoption =\fR value ...>)?" 4
Creates a new bitmap item of at the end of the last
line of the compound image. Additional \fIoptions\fR accepted by the
bitmap type are:
.Ip "\fB\-background\fR => \fIcolor\fR" 8
Specifies the background color of the bitmap item.
.Ip "\fB\-bitmap\fR => \fIname\fR" 8
Specifies a bitmap to display in this item, in any of the forms
acceptable to \fBTk_GetBitmap(3)\fR.
.Ip "\fB\-foreground\fR => \fIcolor\fR" 8
Specifies the foreground color of the bitmap item.
.Ip "\fI$compound\fR\->\fBImage\fR?(\fIoption =\fR value ...>)?" 4
Creates a new image item of at the end of the last
line of the compound image. Additional \fIoptions\fR accepted by the
image type are:
.Ip "\fB\-image\fR => \fIname\fR" 8
Specifies an image to display in this item. \fIname\fR
must have been created with the \fBimage create\fR command.
.Ip "\fI$compound\fR\->\fBSpace\fR?(\fIoption =\fR value ...>)?" 4
Creates a new space item of at the end of the last line of the
compound image. Space items do not display anything. They just acts as
space holders that add additional spaces between items inside a
compound image. Additional \fIoptions\fR accepted by the image type
are:
.Ip "\fB\-width\fR => \fIvalue\fR" 8
Specifies the width of this space. The \fIvalue\fR may have any of the
forms acceptable to \fBTk_GetPixels(3)\fR.
.Ip "\fB\-height\fR => \fIvalue\fR" 8
Specifies the height of this space. The \fIvalue\fR may have any of
the forms acceptable to \fBTk_GetPixels(3)\fR.
.Ip "\fI$compound\fR\->\fBText\fR?(\fIoption =\fR value ...>)?" 4
Creates a new text item of at the end of the last line of the compound
image. Additional \fIoptions\fR accepted by the text type are:
.Ip "\fB\-background\fR => \fIcolor\fR" 8
Specifies the background color of the text item.
.Ip "\fB\-font\fR => \fIname\fR" 8
Specifies the font to be used for this text item.
.Ip "\fB\-foreground\fR => \fIcolor\fR" 8
Specifies the foreground color of the text item.
.Ip "\fB\-justify\fR \fIvalue\fR" 8
When there are multiple lines of text displayed in a text item, this
option determines how the lines line up with each other. \fIvalue\fR
must be one of \fBleft\fR, \fBcenter\fR, or \fBright\fR.  \fBLeft\fR
means that the lines\*(R' left edges all line up, \fBcenter\fR means that
the lines\*(R' centers are aligned, and \fBright\fR means that the lines\*(R'
right edges line up.
.Ip "\fB\-text\fR => \fIstring\fR" 8
Specifies a text string to display in this text item.
.Ip "\fB\-underline\fR \fIvalue\fR" 8
Specifies the integer index of a character to underline in the text
item. 0 corresponds to the first character of the text displayed in
the text item, 1 to the next character, and so on.
.Ip "\fB\-wraplength\fR \fIvalue\fR" 8
This option specifies the maximum line length of the label string on
this text item. If the line length of the label string exceeds this
length, it is wrapped onto the next line, so that no line is longer
than the specified length. The value may be specified in any of the
standard forms for screen distances. If this value is less than or
equal to 0 then no wrapping is done: lines will break only at newline
characters in the text.
.SH "EXAMPLE"
The following example creates a compound image with a bitmap and a
text string and places this image into a \fBButton(n)\fR
widget. Notice that the image must be created using the widget 
that it resides in.
.PP
.Vb 8
\&  my $b = $parent->Button;
\&  my $c = $b->Compound;
\&  $b->configure(-image => $c);
\&  $c->Line;
\&  $c->Bitmap(-bitmap => 'warning');
\&  $c->Space(-width => 8);
\&  $c->Text(-text => "Warning", -underline => 0);
\&  $b->pack;
.Ve
.SH "KEYWORDS"
\fIimage\fR\|(n), \fITix\fR\|(n)

.rn }` ''
.IX Title "COMPOUND 1"
.IX Name "Tk::Compound - Create multi-line compound images."

.IX Header "NAME"

.IX Header "DESCRIPTION"

.IX Header "CREATING COMPOUND IMAGES"

.IX Item "\fB\-background\fR => \fIcolor\fR"

.IX Item "\fB\-borderwidth\fR => \fIpixels\fR"

.IX Item "\fB\-font\fR => \fIfont\fR"

.IX Item "\fB\-foreground\fR => \fIcolor\fR"

.IX Item "\fB\-padx\fR => \fIvalue\fR"

.IX Item "\fB\-pady\fR => \fIvalue\fR"

.IX Item "\fB\-relief\fR => \fIvalue\fR"

.IX Item "\fB\-showbackground\fR => \fIvalue\fR"

.IX Header "IMAGE COMMAND"

.IX Item "\fI$compound\fR\->\fBLine\fR?(\fIoption =\fR value ...>)?"

.IX Item "\fB\-anchor\fR value"

.IX Item "\fB\-padx\fR => \fIvalue\fR"

.IX Item "\fI$compound\fR\->\fIItemtype\fR?(\fIoption =\fR value ...>)?"

.IX Item "\fB\-anchor\fR value"

.IX Item "\fB\-padx\fR => \fIvalue\fR"

.IX Item "\fB\-pady\fR => \fIvalue\fR"

.IX Item "\fIitem-type\fR can be any of the following:"

.IX Item "\fI$compound\fR\->\fBBitmap\fR?(\fIoption =\fR value ...>)?"

.IX Item "\fB\-background\fR => \fIcolor\fR"

.IX Item "\fB\-bitmap\fR => \fIname\fR"

.IX Item "\fB\-foreground\fR => \fIcolor\fR"

.IX Item "\fI$compound\fR\->\fBImage\fR?(\fIoption =\fR value ...>)?"

.IX Item "\fB\-image\fR => \fIname\fR"

.IX Item "\fI$compound\fR\->\fBSpace\fR?(\fIoption =\fR value ...>)?"

.IX Item "\fB\-width\fR => \fIvalue\fR"

.IX Item "\fB\-height\fR => \fIvalue\fR"

.IX Item "\fI$compound\fR\->\fBText\fR?(\fIoption =\fR value ...>)?"

.IX Item "\fB\-background\fR => \fIcolor\fR"

.IX Item "\fB\-font\fR => \fIname\fR"

.IX Item "\fB\-foreground\fR => \fIcolor\fR"

.IX Item "\fB\-justify\fR \fIvalue\fR"

.IX Item "\fB\-text\fR => \fIstring\fR"

.IX Item "\fB\-underline\fR \fIvalue\fR"

.IX Item "\fB\-wraplength\fR \fIvalue\fR"

.IX Header "EXAMPLE"

.IX Header "KEYWORDS"

