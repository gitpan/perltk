.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH RADIOBUTTON 1 "perl 5.005, patch 02" "9/Nov/99" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
Tk::Radiobutton \- Create and manipulate Radiobutton widgets
.SH "SYNOPSIS"
\fI$radiobutton\fR = \fI$parent\fR\->\fBRadiobutton\fR(?\fIoptions\fR?);
.SH "STANDARD OPTIONS"
\fB\-activebackground\fR	\fB\-cursor\fR	\fB\-highlightthickness\fR	\fB\-takefocus\fR
\fB\-activeforeground\fR	\fB\-disabledforeground\fR	\fB\-image\fR	\fB\-text\fR
\fB\-anchor\fR	\fB\-font\fR	\fB\-justify\fR	\fB\-textvariable\fR
\fB\-background\fR	\fB\-foreground\fR	\fB\-padx\fR	\fB\-underline\fR
\fB\-bitmap\fR	\fB\-highlightbackground\fR	\fB\-pady\fR	\fB\-wraplength\fR
\fB\-borderwidth\fR	\fB\-highlightcolor\fR	\fB\-relief\fR
.PP
See the \fITk::options\fR manpage for details of the standard options.
.SH "WIDGET\-SPECIFIC OPTIONS"
.Ip "Name:	\fBcommand\fR" 4
.Ip "Class:	\fBCommand\fR" 4
.Ip "Switch:	\fB\-command\fR" 4
Specifies a perl/Tk callback to associate with the button.  This command
is typically invoked when mouse button 1 is released over the button
window.  The button's global variable (\fB\-variable\fR option) will
be updated before the command is invoked.
.Ip "Name:	\fBheight\fR" 4
.Ip "Class:	\fBHeight\fR" 4
.Ip "Switch:	\fB\-height\fR" 4
Specifies a desired height for the button.
If an image or bitmap is being displayed in the button then the value is in
screen units (i.e. any of the forms acceptable to \fBTk_GetPixels\fR);
for text it is in lines of text.
If this option isn't specified, the button's desired height is computed
from the size of the image or bitmap or text being displayed in it.
.Ip "Name:	\fBindicatorOn\fR" 4
.Ip "Class:	\fBIndicatorOn\fR" 4
.Ip "Switch:	\fB\-indicatoron\fR" 4
Specifies whether or not the indicator should be drawn.  Must be a
proper boolean value.  If false, the \fBrelief\fR option is
ignored and the widget's relief is always sunken if the widget is
selected and raised otherwise.
.Ip "Name:	\fBselectColor\fR" 4
.Ip "Class:	\fBBackground\fR" 4
.Ip "Switch:	\fB\-selectcolor\fR" 4
Specifies a background color to use when the button is selected.
If \fBindicatorOn\fR is true then the color applies to the indicator.
Under Windows, this color is used as the background for the indicator
regardless of the select state.
If \fBindicatorOn\fR is false, this color is used as the background
for the entire widget, in place of \fBbackground\fR or \fBactiveBackground\fR,
whenever the widget is selected.
If specified as an empty string then no special color is used for
displaying when the widget is selected.
.Ip "Name:	\fBselectImage\fR" 4
.Ip "Class:	\fBSelectImage\fR" 4
.Ip "Switch:	\fB\-selectimage\fR" 4
Specifies an image to display (in place of the \fBimage\fR option)
when the radiobutton is selected.
This option is ignored unless the \fBimage\fR option has been
specified.
.Ip "Name:	\fBstate\fR" 4
.Ip "Class:	\fBState\fR" 4
.Ip "Switch:	\fB\-state\fR" 4
Specifies one of three states for the radiobutton:  \fBnormal\fR, \fBactive\fR,
or \fBdisabled\fR.  In normal state the radiobutton is displayed using the
\fBforeground\fR and \fBbackground\fR options.  The active state is
typically used when the pointer is over the radiobutton.  In active state
the radiobutton is displayed using the \fBactiveForeground\fR and
\fBactiveBackground\fR options.  Disabled state means that the radiobutton
should be insensitive:  the default bindings will refuse to activate
the widget and will ignore mouse button presses.
In this state the \fBdisabledForeground\fR and
\fBbackground\fR options determine how the radiobutton is displayed.
.Ip "Name:	\fBvalue\fR" 4
.Ip "Class:	\fBValue\fR" 4
.Ip "Switch:	\fB\-value\fR" 4
Specifies value to store in the button's associated variable whenever
this button is selected.
.Ip "Name:	\fBvariable\fR" 4
.Ip "Class:	\fBVariable\fR" 4
.Ip "Switch:	\fB\-variable\fR" 4
Specifies reference to a variable to set whenever this button is
selected.  Changes in this variable also cause the button to select
or deselect itself. Defaults to the value \f(CW\e$Tk::selectedButton\fR.
.Ip "Name:	\fBwidth\fR" 4
.Ip "Class:	\fBWidth\fR" 4
.Ip "Switch:	\fB\-width\fR" 4
Specifies a desired width for the button.
If an image or bitmap is being displayed in the button, the value is in
screen units (i.e. any of the forms acceptable to \fBTk_GetPixels\fR);
for text it is in characters.
If this option isn't specified, the button's desired width is computed
from the size of the image or bitmap or text being displayed in it.
.SH "DESCRIPTION"
The \fBRadiobutton\fR method creates a new window (given by the
\f(CW$widget\fR argument) and makes it into a radiobutton widget.
Additional
options, described above, may be specified on the command line
or in the option database
to configure aspects of the radiobutton such as its colors, font,
text, and initial relief.  The \fBradiobutton\fR command returns its
\f(CW$widget\fR argument.  At the time this command is invoked,
there must not exist a window named \f(CW$widget\fR, but
\f(CW$widget\fR's parent must exist.
.PP
A radiobutton is a widget that displays a textual string, bitmap or image
and a diamond or circle called an \fIindicator\fR.
If text is displayed, it must all be in a single font, but it
can occupy multiple lines on the screen (if it contains newlines
or if wrapping occurs because of the \fBwrapLength\fR option) and
one of the characters may optionally be underlined using the
\fBunderline\fR option.  A radiobutton has
all of the behavior of a simple button: it can display itself in either
of three different ways, according to the \fBstate\fR option;
it can be made to appear
raised, sunken, or flat; it can be made to flash; and it invokes
a perl/Tk callback whenever mouse button 1 is clicked over the
check button.
.PP
In addition, radiobuttons can be \fIselected\fR.
If a radiobutton is selected, the indicator is normally
drawn with a selected appearance, and
a Tcl variable associated with the radiobutton is set to a particular
value (normally 1).
Under Unix, the indicator is drawn with a sunken relief and a special
color.  Under Windows, the indicator is drawn with a round mark inside.
If the radiobutton is not selected, then the indicator is drawn with a
deselected appearance, and the associated variable is
set to a different value (typically 0).
Under Unix, the indicator is drawn with a raised relief and no special
color.  Under Windows, the indicator is drawn without a round mark inside.
Typically, several radiobuttons share a single variable and the
value of the variable indicates which radiobutton is to be selected.
When a radiobutton is selected it sets the value of the variable to
indicate that fact;  each radiobutton also monitors the value of
the variable and automatically selects and deselects itself when the
variable's value changes.
By default the variable \fBselectedButton\fR
is used;  its contents give the name of the button that is
selected, or the empty string if no button associated with that
variable is selected.
The name of the variable for a radiobutton,
plus the variable to be stored into it, may be modified with options
on the command line or in the option database.
Configuration options may also be used to modify the way the
indicator is displayed (or whether it is displayed at all).
By default a radiobutton is configured to select itself on button clicks.
.SH "WIDGET METHODS"
The \fBRadiobutton\fR method creates a widget object.
This object supports the \fBconfigure\fR and \fBcget\fR methods
described in the \fITk::options\fR manpage which can be used to enquire and
modify the options described above.
The widget also inherits all the methods provided by the generic
Tk::Widget class.
.PP
The following additional methods are available for radiobutton widgets:
.Ip "\fI$radiobutton\fR\->\fBdeselect\fR" 4
Deselects the radiobutton and sets the associated variable to an
empty string.
If this radiobutton was not currently selected, the command has
no effect.
.Ip "\fI$radiobutton\fR\->\fBflash\fR" 4
Flashes the radiobutton.  This is accomplished by redisplaying the radiobutton
several times, alternating between active and normal colors.  At
the end of the flash the radiobutton is left in the same normal/active
state as when the command was invoked.
This command is ignored if the radiobutton's state is \fBdisabled\fR.
.Ip "\fI$radiobutton\fR\->\fBinvoke\fR" 4
Does just what would have happened if the user invoked the radiobutton
with the mouse: selects the button and invokes
its associated Tcl command, if there is one.
The return value is the return value from the Tcl command, or an
empty string if there is no command associated with the radiobutton.
This command is ignored if the radiobutton's state is \fBdisabled\fR.
.Ip "\fI$radiobutton\fR\->\fBselect\fR" 4
Selects the radiobutton and sets the associated variable to the
value corresponding to this widget.
.SH "BINDINGS"
Tk automatically creates class bindings for radiobuttons that give them
the following default behavior:
.Ip "[1]" 4
On Unix systems, a radiobutton activates whenever the mouse passes
over it and deactivates whenever the mouse leaves the radiobutton.  On
Mac and Windows systems, when mouse button 1 is pressed over a
radiobutton, the button activates whenever the mouse pointer is inside
the button, and deactivates whenever the mouse pointer leaves the
button.
.Ip "[2]" 4
When mouse button 1 is pressed over a radiobutton it is invoked (it
becomes selected and the command associated with the button is
invoked, if there is one).
.Ip "[3]" 4
When a radiobutton has the input focus, the space key causes the radiobutton
to be invoked.
.Sp
If the radiobutton's state is \fBdisabled\fR then none of the above
actions occur:  the radiobutton is completely non-responsive.
.Sp
The behavior of radiobuttons can be changed by defining new bindings for
individual widgets or by redefining the class bindings.
.SH "KEYWORDS"
radiobutton, widget

.rn }` ''
.IX Title "RADIOBUTTON 1"
.IX Name "Tk::Radiobutton - Create and manipulate Radiobutton widgets"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "STANDARD OPTIONS"

.IX Header "WIDGET\-SPECIFIC OPTIONS"

.IX Item "Name:	\fBcommand\fR"

.IX Item "Class:	\fBCommand\fR"

.IX Item "Switch:	\fB\-command\fR"

.IX Item "Name:	\fBheight\fR"

.IX Item "Class:	\fBHeight\fR"

.IX Item "Switch:	\fB\-height\fR"

.IX Item "Name:	\fBindicatorOn\fR"

.IX Item "Class:	\fBIndicatorOn\fR"

.IX Item "Switch:	\fB\-indicatoron\fR"

.IX Item "Name:	\fBselectColor\fR"

.IX Item "Class:	\fBBackground\fR"

.IX Item "Switch:	\fB\-selectcolor\fR"

.IX Item "Name:	\fBselectImage\fR"

.IX Item "Class:	\fBSelectImage\fR"

.IX Item "Switch:	\fB\-selectimage\fR"

.IX Item "Name:	\fBstate\fR"

.IX Item "Class:	\fBState\fR"

.IX Item "Switch:	\fB\-state\fR"

.IX Item "Name:	\fBvalue\fR"

.IX Item "Class:	\fBValue\fR"

.IX Item "Switch:	\fB\-value\fR"

.IX Item "Name:	\fBvariable\fR"

.IX Item "Class:	\fBVariable\fR"

.IX Item "Switch:	\fB\-variable\fR"

.IX Item "Name:	\fBwidth\fR"

.IX Item "Class:	\fBWidth\fR"

.IX Item "Switch:	\fB\-width\fR"

.IX Header "DESCRIPTION"

.IX Header "WIDGET METHODS"

.IX Item "\fI$radiobutton\fR\->\fBdeselect\fR"

.IX Item "\fI$radiobutton\fR\->\fBflash\fR"

.IX Item "\fI$radiobutton\fR\->\fBinvoke\fR"

.IX Item "\fI$radiobutton\fR\->\fBselect\fR"

.IX Header "BINDINGS"

.IX Item "[1]"

.IX Item "[2]"

.IX Item "[3]"

.IX Header "KEYWORDS"

