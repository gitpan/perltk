.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH Tk::Pane 3 "Tk800.022" "18/Dec/99" "perl/Tk Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
Tk::Pane \- A window panner
.SH "SYNOPSIS"
.PP
.Vb 7
\&    use Tk::Pane;
\&    
\&    $pane = $mw->Scrolled(Pane, Name => 'fred',
\&        -scrollbars => 'soe',
\&        -sticky => 'we',
\&        -gridded => 'y'
\&    );
.Ve
.Vb 1
\&    $pane->Frame;
.Ve
.Vb 1
\&    $pane->pack;
.Ve
.SH "DESCRIPTION"
\fBTk::Pane\fR provides a scrollable frame widget. Once created it can be
treated as a frame, except it is scrollable.
.SH "OPTIONS"
.Ip "\fB\-gridded\fR => \fIdirection\fR" 4
Specifies if the top and left edges of the pane should snap to a
grid column. This option is only useful if the widgets in the pane
are managed by the \fIgrid\fR geometry manager. Possible values are
\fBx\fR, \fBy\fR and \fBxy\fR.
.Ip "\fB\-sticky\fR => \fIstyle\fR" 4
If Pane is larger than its requested dimensions, this option may be used to
position (or stretch) the slave within its cavity. \fIStyle\fR is a string that
contains zero or more of the characters n, s, e or w. The string can optionally
contains spaces or commas, but they are ignored. Each letter refers to a side
(north, south, east, or west) that the slave will \*(L"stick\*(R" to. If both n and s
(or e and w) are specified, the slave will be stretched to fill the entire
height (or width) of its cavity. 
.SH "METHODS"
.Ip "\fI$pane\fR\->\fBsee\fR(\fI$widget\fR ?,\fIoptions\fR?)" 4
Adjusts the view so that \fI$widget\fR is visable. Aditional parameters in
\fIoptions-value\fR pairs can be passed, each \fIoption-value\fR pair must be
one of the following
.Ip "\fB\-anchor\fR => \fIanchor\fR" 12
Specifies how to make the widget visable. If not given then as much of
the widget as possible is made visable.
.Sp
Possible values are \fBn\fR, \fBs\fR, \fBw\fR, \fBe\fR, \fBnw\fR, \fBne\fR, \fBsw\fR and \fBse\fR.
This will cause an edge on the widget to be aligned with the corresponding
edge on the pane. for example \fBnw\fR will cause the top left of the widget
to be placed at the top left of the pane. \fBs\fR will cause the bottom of the
widget to be placed at the bottom of the pane, and as much of the widget
as possible made visable in the x direction.
.Ip "\fI$pane\fR\->\fBxview\fR" 4
Returns a list containing two elements, both of which are real fractions
between 0 and 1. The first element gives the position of  the left of the
window, relative to the Pane as a whole (0.5 means it is halfway through the
Pane, for example). The second element gives the position of the right of the
window, relative to the Pane as a whole.
.Ip "\fI$pane\fR\->\fBxview\fR(\fI$widget\fR)" 4
Adjusts the view in the window so that \fIwidget\fR is displayed at the left of
the window. 
.Ip "\fI$pane\fR\->\fBxview\fR(\fBmoveto\fR => \fIfraction\fR)" 4
Adjusts the view in the window so that \fIfraction\fR of the total width of the
Pane is off-screen to the left. fraction must be a fraction between 0 and 1.
.Ip "\fI$pane\fR\->\fBxview\fR(\fBscroll\fR => \fInumber\fR, \fIwhat\fR)" 4
This command shifts the view in the window left or right according to \fInumber\fR
and \fIwhat\fR. \fINumber\fR must be an integer. \fIWhat\fR must be either \fBunits\fR or
\fBpages\fR or an abbreviation of one of these. If \fIwhat\fR is \fBunits\fR, the view
adjusts left or right by \fInumber\fR*10 screen units on the display; if it is
\fBpages\fR then the view adjusts by number screenfuls. If number is negative then
widgets farther to the left become visible; if it is positive then widgets
farther to the right become visible. 
.Ip "\fI$pane\fR\->\fByview\fR" 4
Returns a list containing two elements, both of which are real fractions
between 0 and 1. The first element gives the position of  the top of the
window, relative to the Pane as a whole (0.5 means it is halfway through the
Pane, for example). The second element gives the position of the bottom of the
window, relative to the Pane as a whole.
.Ip "\fI$pane\fR\->\fByview\fR(\fI$widget\fR)" 4
Adjusts the view in the window so that \fIwidget\fR is displayed at the top of the
window. 
.Ip "\fI$pane\fR\->\fByview\fR(\fBmoveto\fR => \fIfraction\fR)" 4
Adjusts the view in the window so that \fIfraction\fR of the total width of the
Pane is off-screen to the top. fraction must be a fraction between 0 and 1.
.Ip "\fI$pane\fR\->\fByview\fR(\fBscroll\fR => \fInumber\fR, \fIwhat\fR)" 4
This command shifts the view in the window up or down according to \fInumber\fR
and \fIwhat\fR. \fINumber\fR must be an integer. \fIWhat\fR must be either \fBunits\fR or
\fBpages\fR or an abbreviation of one of these. If \fIwhat\fR is \fBunits\fR, the view
adjusts up or down by \fInumber\fR*10 screen units on the display; if it is
\fBpages\fR then the view adjusts by number screenfuls. If number is negative then
widgets farther up become visible; if it is positive then widgets farther down
become visible. 
.SH "AUTHOR"
Graham Barr <\fIgbarr@pobox.com\fR>
.SH "COPYRIGHT"
Copyright (c) 1997-1998 Graham Barr. All rights reserved.
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

.rn }` ''
.IX Title "Tk::Pane 3"
.IX Name "Tk::Pane - A window panner"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "OPTIONS"

.IX Item "\fB\-gridded\fR => \fIdirection\fR"

.IX Item "\fB\-sticky\fR => \fIstyle\fR"

.IX Header "METHODS"

.IX Item "\fI$pane\fR\->\fBsee\fR(\fI$widget\fR ?,\fIoptions\fR?)"

.IX Item "\fB\-anchor\fR => \fIanchor\fR"

.IX Item "\fI$pane\fR\->\fBxview\fR"

.IX Item "\fI$pane\fR\->\fBxview\fR(\fI$widget\fR)"

.IX Item "\fI$pane\fR\->\fBxview\fR(\fBmoveto\fR => \fIfraction\fR)"

.IX Item "\fI$pane\fR\->\fBxview\fR(\fBscroll\fR => \fInumber\fR, \fIwhat\fR)"

.IX Item "\fI$pane\fR\->\fByview\fR"

.IX Item "\fI$pane\fR\->\fByview\fR(\fI$widget\fR)"

.IX Item "\fI$pane\fR\->\fByview\fR(\fBmoveto\fR => \fIfraction\fR)"

.IX Item "\fI$pane\fR\->\fByview\fR(\fBscroll\fR => \fInumber\fR, \fIwhat\fR)"

.IX Header "AUTHOR"

.IX Header "COPYRIGHT"

